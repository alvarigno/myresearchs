//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccesoDatos.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class baseprod2Entities : DbContext
    {
        public baseprod2Entities()
            : base("name=baseprod2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int SPR_Valida_ip_x_xkey(string xkey, ObjectParameter respuesta, ObjectParameter ipaddress)
        {
            var xkeyParameter = xkey != null ?
                new ObjectParameter("xkey", xkey) :
                new ObjectParameter("xkey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPR_Valida_ip_x_xkey", xkeyParameter, respuesta, ipaddress);
        }
    
        public virtual int SPR_Valida_xKey_Acceso_Usuario(string xkey, ObjectParameter respuesta, ObjectParameter nombre)
        {
            var xkeyParameter = xkey != null ?
                new ObjectParameter("xkey", xkey) :
                new ObjectParameter("xkey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPR_Valida_xKey_Acceso_Usuario", xkeyParameter, respuesta, nombre);
        }
    
        public virtual ObjectResult<SP_apiCLA_Categorias_Result> SP_apiCLA_Categorias(Nullable<int> idCategoria)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_apiCLA_Categorias_Result>("SP_apiCLA_Categorias", idCategoriaParameter);
        }
    
        public virtual ObjectResult<SP_apiCLA_CarroceriasCategoria_Result> SP_apiCLA_CarroceriasCategoria(Nullable<int> codCategoria)
        {
            var codCategoriaParameter = codCategoria.HasValue ?
                new ObjectParameter("codCategoria", codCategoria) :
                new ObjectParameter("codCategoria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_apiCLA_CarroceriasCategoria_Result>("SP_apiCLA_CarroceriasCategoria", codCategoriaParameter);
        }
    
        public virtual int SPR_Inserta_datos_vehiculos_publicar(string codigo_auto_origen, string nuevo_o_usado, Nullable<int> categoria, string tipo_vehiculo, string carroceria, Nullable<int> marca, string modelo, string version, Nullable<int> ano, Nullable<int> precio, string color, Nullable<int> kM, string motor, Nullable<int> combustible, Nullable<int> cilindrada, string potencia, string tipo_cambio, string aire_acondicionado, string tipo_direccion, string radio, string alzavidrios_electricos, string espejos_electricos, string frenos_ABS, string airbag, string unico_dueno, string cierre_centralizado, string catalitico, string fwd, string llantas, string puertas, string alarma, string consignacion, string techo, string comentarios, string patente, string fotos, Nullable<System.DateTime> fecha_i_data, Nullable<int> sucursal, string nombre_archivo, string ipaddress, ObjectParameter respuesta, ObjectParameter idinsert)
        {
            var codigo_auto_origenParameter = codigo_auto_origen != null ?
                new ObjectParameter("codigo_auto_origen", codigo_auto_origen) :
                new ObjectParameter("codigo_auto_origen", typeof(string));
    
            var nuevo_o_usadoParameter = nuevo_o_usado != null ?
                new ObjectParameter("Nuevo_o_usado", nuevo_o_usado) :
                new ObjectParameter("Nuevo_o_usado", typeof(string));
    
            var categoriaParameter = categoria.HasValue ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(int));
    
            var tipo_vehiculoParameter = tipo_vehiculo != null ?
                new ObjectParameter("Tipo_vehiculo", tipo_vehiculo) :
                new ObjectParameter("Tipo_vehiculo", typeof(string));
    
            var carroceriaParameter = carroceria != null ?
                new ObjectParameter("Carroceria", carroceria) :
                new ObjectParameter("Carroceria", typeof(string));
    
            var marcaParameter = marca.HasValue ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(int));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("Ano", ano) :
                new ObjectParameter("Ano", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var kMParameter = kM.HasValue ?
                new ObjectParameter("KM", kM) :
                new ObjectParameter("KM", typeof(int));
    
            var motorParameter = motor != null ?
                new ObjectParameter("motor", motor) :
                new ObjectParameter("motor", typeof(string));
    
            var combustibleParameter = combustible.HasValue ?
                new ObjectParameter("combustible", combustible) :
                new ObjectParameter("combustible", typeof(int));
    
            var cilindradaParameter = cilindrada.HasValue ?
                new ObjectParameter("Cilindrada", cilindrada) :
                new ObjectParameter("Cilindrada", typeof(int));
    
            var potenciaParameter = potencia != null ?
                new ObjectParameter("potencia", potencia) :
                new ObjectParameter("potencia", typeof(string));
    
            var tipo_cambioParameter = tipo_cambio != null ?
                new ObjectParameter("tipo_cambio", tipo_cambio) :
                new ObjectParameter("tipo_cambio", typeof(string));
    
            var aire_acondicionadoParameter = aire_acondicionado != null ?
                new ObjectParameter("aire_acondicionado", aire_acondicionado) :
                new ObjectParameter("aire_acondicionado", typeof(string));
    
            var tipo_direccionParameter = tipo_direccion != null ?
                new ObjectParameter("tipo_direccion", tipo_direccion) :
                new ObjectParameter("tipo_direccion", typeof(string));
    
            var radioParameter = radio != null ?
                new ObjectParameter("radio", radio) :
                new ObjectParameter("radio", typeof(string));
    
            var alzavidrios_electricosParameter = alzavidrios_electricos != null ?
                new ObjectParameter("alzavidrios_electricos", alzavidrios_electricos) :
                new ObjectParameter("alzavidrios_electricos", typeof(string));
    
            var espejos_electricosParameter = espejos_electricos != null ?
                new ObjectParameter("espejos_electricos", espejos_electricos) :
                new ObjectParameter("espejos_electricos", typeof(string));
    
            var frenos_ABSParameter = frenos_ABS != null ?
                new ObjectParameter("frenos_ABS", frenos_ABS) :
                new ObjectParameter("frenos_ABS", typeof(string));
    
            var airbagParameter = airbag != null ?
                new ObjectParameter("airbag", airbag) :
                new ObjectParameter("airbag", typeof(string));
    
            var unico_duenoParameter = unico_dueno != null ?
                new ObjectParameter("unico_dueno", unico_dueno) :
                new ObjectParameter("unico_dueno", typeof(string));
    
            var cierre_centralizadoParameter = cierre_centralizado != null ?
                new ObjectParameter("cierre_centralizado", cierre_centralizado) :
                new ObjectParameter("cierre_centralizado", typeof(string));
    
            var cataliticoParameter = catalitico != null ?
                new ObjectParameter("catalitico", catalitico) :
                new ObjectParameter("catalitico", typeof(string));
    
            var fwdParameter = fwd != null ?
                new ObjectParameter("fwd", fwd) :
                new ObjectParameter("fwd", typeof(string));
    
            var llantasParameter = llantas != null ?
                new ObjectParameter("Llantas", llantas) :
                new ObjectParameter("Llantas", typeof(string));
    
            var puertasParameter = puertas != null ?
                new ObjectParameter("Puertas", puertas) :
                new ObjectParameter("Puertas", typeof(string));
    
            var alarmaParameter = alarma != null ?
                new ObjectParameter("Alarma", alarma) :
                new ObjectParameter("Alarma", typeof(string));
    
            var consignacionParameter = consignacion != null ?
                new ObjectParameter("consignacion", consignacion) :
                new ObjectParameter("consignacion", typeof(string));
    
            var techoParameter = techo != null ?
                new ObjectParameter("Techo", techo) :
                new ObjectParameter("Techo", typeof(string));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("comentarios", comentarios) :
                new ObjectParameter("comentarios", typeof(string));
    
            var patenteParameter = patente != null ?
                new ObjectParameter("patente", patente) :
                new ObjectParameter("patente", typeof(string));
    
            var fotosParameter = fotos != null ?
                new ObjectParameter("fotos", fotos) :
                new ObjectParameter("fotos", typeof(string));
    
            var fecha_i_dataParameter = fecha_i_data.HasValue ?
                new ObjectParameter("fecha_i_data", fecha_i_data) :
                new ObjectParameter("fecha_i_data", typeof(System.DateTime));
    
            var sucursalParameter = sucursal.HasValue ?
                new ObjectParameter("sucursal", sucursal) :
                new ObjectParameter("sucursal", typeof(int));
    
            var nombre_archivoParameter = nombre_archivo != null ?
                new ObjectParameter("nombre_archivo", nombre_archivo) :
                new ObjectParameter("nombre_archivo", typeof(string));
    
            var ipaddressParameter = ipaddress != null ?
                new ObjectParameter("ipaddress", ipaddress) :
                new ObjectParameter("ipaddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPR_Inserta_datos_vehiculos_publicar", codigo_auto_origenParameter, nuevo_o_usadoParameter, categoriaParameter, tipo_vehiculoParameter, carroceriaParameter, marcaParameter, modeloParameter, versionParameter, anoParameter, precioParameter, colorParameter, kMParameter, motorParameter, combustibleParameter, cilindradaParameter, potenciaParameter, tipo_cambioParameter, aire_acondicionadoParameter, tipo_direccionParameter, radioParameter, alzavidrios_electricosParameter, espejos_electricosParameter, frenos_ABSParameter, airbagParameter, unico_duenoParameter, cierre_centralizadoParameter, cataliticoParameter, fwdParameter, llantasParameter, puertasParameter, alarmaParameter, consignacionParameter, techoParameter, comentariosParameter, patenteParameter, fotosParameter, fecha_i_dataParameter, sucursalParameter, nombre_archivoParameter, ipaddressParameter, respuesta, idinsert);
        }
    
        public virtual int SPR_Actualiza_datos_vehiculos_publicar(string codigo_auto_origen, string nuevo_o_usado, Nullable<int> categoria, string tipo_vehiculo, string carroceria, Nullable<int> marca, string modelo, string version, Nullable<int> ano, Nullable<int> precio, string color, Nullable<int> kM, string motor, Nullable<int> combustible, Nullable<int> cilindrada, string potencia, string tipo_cambio, string aire_acondicionado, string tipo_direccion, string radio, string alzavidrios_electricos, string espejos_electricos, string frenos_ABS, string airbag, string unico_dueno, string cierre_centralizado, string catalitico, string fwd, string llantas, string puertas, string alarma, string consignacion, string techo, string comentarios, string patente, string fotos, Nullable<int> sucursal, string nombre_archivo, string ipaddress, ObjectParameter respuestaupdate, ObjectParameter idregistro)
        {
            var codigo_auto_origenParameter = codigo_auto_origen != null ?
                new ObjectParameter("codigo_auto_origen", codigo_auto_origen) :
                new ObjectParameter("codigo_auto_origen", typeof(string));
    
            var nuevo_o_usadoParameter = nuevo_o_usado != null ?
                new ObjectParameter("Nuevo_o_usado", nuevo_o_usado) :
                new ObjectParameter("Nuevo_o_usado", typeof(string));
    
            var categoriaParameter = categoria.HasValue ?
                new ObjectParameter("categoria", categoria) :
                new ObjectParameter("categoria", typeof(int));
    
            var tipo_vehiculoParameter = tipo_vehiculo != null ?
                new ObjectParameter("Tipo_vehiculo", tipo_vehiculo) :
                new ObjectParameter("Tipo_vehiculo", typeof(string));
    
            var carroceriaParameter = carroceria != null ?
                new ObjectParameter("Carroceria", carroceria) :
                new ObjectParameter("Carroceria", typeof(string));
    
            var marcaParameter = marca.HasValue ?
                new ObjectParameter("Marca", marca) :
                new ObjectParameter("Marca", typeof(int));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("Modelo", modelo) :
                new ObjectParameter("Modelo", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("Ano", ano) :
                new ObjectParameter("Ano", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(int));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var kMParameter = kM.HasValue ?
                new ObjectParameter("KM", kM) :
                new ObjectParameter("KM", typeof(int));
    
            var motorParameter = motor != null ?
                new ObjectParameter("motor", motor) :
                new ObjectParameter("motor", typeof(string));
    
            var combustibleParameter = combustible.HasValue ?
                new ObjectParameter("combustible", combustible) :
                new ObjectParameter("combustible", typeof(int));
    
            var cilindradaParameter = cilindrada.HasValue ?
                new ObjectParameter("Cilindrada", cilindrada) :
                new ObjectParameter("Cilindrada", typeof(int));
    
            var potenciaParameter = potencia != null ?
                new ObjectParameter("potencia", potencia) :
                new ObjectParameter("potencia", typeof(string));
    
            var tipo_cambioParameter = tipo_cambio != null ?
                new ObjectParameter("tipo_cambio", tipo_cambio) :
                new ObjectParameter("tipo_cambio", typeof(string));
    
            var aire_acondicionadoParameter = aire_acondicionado != null ?
                new ObjectParameter("aire_acondicionado", aire_acondicionado) :
                new ObjectParameter("aire_acondicionado", typeof(string));
    
            var tipo_direccionParameter = tipo_direccion != null ?
                new ObjectParameter("tipo_direccion", tipo_direccion) :
                new ObjectParameter("tipo_direccion", typeof(string));
    
            var radioParameter = radio != null ?
                new ObjectParameter("radio", radio) :
                new ObjectParameter("radio", typeof(string));
    
            var alzavidrios_electricosParameter = alzavidrios_electricos != null ?
                new ObjectParameter("alzavidrios_electricos", alzavidrios_electricos) :
                new ObjectParameter("alzavidrios_electricos", typeof(string));
    
            var espejos_electricosParameter = espejos_electricos != null ?
                new ObjectParameter("espejos_electricos", espejos_electricos) :
                new ObjectParameter("espejos_electricos", typeof(string));
    
            var frenos_ABSParameter = frenos_ABS != null ?
                new ObjectParameter("frenos_ABS", frenos_ABS) :
                new ObjectParameter("frenos_ABS", typeof(string));
    
            var airbagParameter = airbag != null ?
                new ObjectParameter("airbag", airbag) :
                new ObjectParameter("airbag", typeof(string));
    
            var unico_duenoParameter = unico_dueno != null ?
                new ObjectParameter("unico_dueno", unico_dueno) :
                new ObjectParameter("unico_dueno", typeof(string));
    
            var cierre_centralizadoParameter = cierre_centralizado != null ?
                new ObjectParameter("cierre_centralizado", cierre_centralizado) :
                new ObjectParameter("cierre_centralizado", typeof(string));
    
            var cataliticoParameter = catalitico != null ?
                new ObjectParameter("catalitico", catalitico) :
                new ObjectParameter("catalitico", typeof(string));
    
            var fwdParameter = fwd != null ?
                new ObjectParameter("fwd", fwd) :
                new ObjectParameter("fwd", typeof(string));
    
            var llantasParameter = llantas != null ?
                new ObjectParameter("Llantas", llantas) :
                new ObjectParameter("Llantas", typeof(string));
    
            var puertasParameter = puertas != null ?
                new ObjectParameter("Puertas", puertas) :
                new ObjectParameter("Puertas", typeof(string));
    
            var alarmaParameter = alarma != null ?
                new ObjectParameter("Alarma", alarma) :
                new ObjectParameter("Alarma", typeof(string));
    
            var consignacionParameter = consignacion != null ?
                new ObjectParameter("consignacion", consignacion) :
                new ObjectParameter("consignacion", typeof(string));
    
            var techoParameter = techo != null ?
                new ObjectParameter("Techo", techo) :
                new ObjectParameter("Techo", typeof(string));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("comentarios", comentarios) :
                new ObjectParameter("comentarios", typeof(string));
    
            var patenteParameter = patente != null ?
                new ObjectParameter("patente", patente) :
                new ObjectParameter("patente", typeof(string));
    
            var fotosParameter = fotos != null ?
                new ObjectParameter("fotos", fotos) :
                new ObjectParameter("fotos", typeof(string));
    
            var sucursalParameter = sucursal.HasValue ?
                new ObjectParameter("sucursal", sucursal) :
                new ObjectParameter("sucursal", typeof(int));
    
            var nombre_archivoParameter = nombre_archivo != null ?
                new ObjectParameter("nombre_archivo", nombre_archivo) :
                new ObjectParameter("nombre_archivo", typeof(string));
    
            var ipaddressParameter = ipaddress != null ?
                new ObjectParameter("ipaddress", ipaddress) :
                new ObjectParameter("ipaddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPR_Actualiza_datos_vehiculos_publicar", codigo_auto_origenParameter, nuevo_o_usadoParameter, categoriaParameter, tipo_vehiculoParameter, carroceriaParameter, marcaParameter, modeloParameter, versionParameter, anoParameter, precioParameter, colorParameter, kMParameter, motorParameter, combustibleParameter, cilindradaParameter, potenciaParameter, tipo_cambioParameter, aire_acondicionadoParameter, tipo_direccionParameter, radioParameter, alzavidrios_electricosParameter, espejos_electricosParameter, frenos_ABSParameter, airbagParameter, unico_duenoParameter, cierre_centralizadoParameter, cataliticoParameter, fwdParameter, llantasParameter, puertasParameter, alarmaParameter, consignacionParameter, techoParameter, comentariosParameter, patenteParameter, fotosParameter, sucursalParameter, nombre_archivoParameter, ipaddressParameter, respuestaupdate, idregistro);
        }
    
        public virtual ObjectResult<SP_apiCLA_MarcasCategoria_Result> SP_apiCLA_MarcasCategoria(Nullable<int> idCategoria, Nullable<int> maxTop, Nullable<bool> top)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var maxTopParameter = maxTop.HasValue ?
                new ObjectParameter("maxTop", maxTop) :
                new ObjectParameter("maxTop", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_apiCLA_MarcasCategoria_Result>("SP_apiCLA_MarcasCategoria", idCategoriaParameter, maxTopParameter, topParameter);
        }
    
        public virtual ObjectResult<SP_PublicarAviso_Automotoras_Result> SP_PublicarAviso_Automotoras(Nullable<int> codCliente, string ip, string patente, string tipo, Nullable<int> marca, string modelo, Nullable<int> ano, string version, string carroceria, Nullable<int> puertas, string tipoDireccion, Nullable<int> precio, Nullable<int> cilindrada, string potencia, string color, Nullable<int> kilom, string motor, string techo, Nullable<int> combustible, string comentario, Nullable<long> uidJato, string airbag, string aireAcon, string alarma, string alzaVidrios, string nuevo, string transmision, string radio, string espejos, string frenosAbs, string unicoDueno, string cierreCentral, string catalitico, string fwd, string llantas, string listaFotos, string plataforma, string consignacion)
        {
            var codClienteParameter = codCliente.HasValue ?
                new ObjectParameter("codCliente", codCliente) :
                new ObjectParameter("codCliente", typeof(int));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var patenteParameter = patente != null ?
                new ObjectParameter("patente", patente) :
                new ObjectParameter("patente", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var marcaParameter = marca.HasValue ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(int));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("modelo", modelo) :
                new ObjectParameter("modelo", typeof(string));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("ano", ano) :
                new ObjectParameter("ano", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var carroceriaParameter = carroceria != null ?
                new ObjectParameter("carroceria", carroceria) :
                new ObjectParameter("carroceria", typeof(string));
    
            var puertasParameter = puertas.HasValue ?
                new ObjectParameter("puertas", puertas) :
                new ObjectParameter("puertas", typeof(int));
    
            var tipoDireccionParameter = tipoDireccion != null ?
                new ObjectParameter("tipoDireccion", tipoDireccion) :
                new ObjectParameter("tipoDireccion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(int));
    
            var cilindradaParameter = cilindrada.HasValue ?
                new ObjectParameter("cilindrada", cilindrada) :
                new ObjectParameter("cilindrada", typeof(int));
    
            var potenciaParameter = potencia != null ?
                new ObjectParameter("potencia", potencia) :
                new ObjectParameter("potencia", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var kilomParameter = kilom.HasValue ?
                new ObjectParameter("kilom", kilom) :
                new ObjectParameter("kilom", typeof(int));
    
            var motorParameter = motor != null ?
                new ObjectParameter("motor", motor) :
                new ObjectParameter("motor", typeof(string));
    
            var techoParameter = techo != null ?
                new ObjectParameter("techo", techo) :
                new ObjectParameter("techo", typeof(string));
    
            var combustibleParameter = combustible.HasValue ?
                new ObjectParameter("combustible", combustible) :
                new ObjectParameter("combustible", typeof(int));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var uidJatoParameter = uidJato.HasValue ?
                new ObjectParameter("uidJato", uidJato) :
                new ObjectParameter("uidJato", typeof(long));
    
            var airbagParameter = airbag != null ?
                new ObjectParameter("airbag", airbag) :
                new ObjectParameter("airbag", typeof(string));
    
            var aireAconParameter = aireAcon != null ?
                new ObjectParameter("aireAcon", aireAcon) :
                new ObjectParameter("aireAcon", typeof(string));
    
            var alarmaParameter = alarma != null ?
                new ObjectParameter("alarma", alarma) :
                new ObjectParameter("alarma", typeof(string));
    
            var alzaVidriosParameter = alzaVidrios != null ?
                new ObjectParameter("alzaVidrios", alzaVidrios) :
                new ObjectParameter("alzaVidrios", typeof(string));
    
            var nuevoParameter = nuevo != null ?
                new ObjectParameter("nuevo", nuevo) :
                new ObjectParameter("nuevo", typeof(string));
    
            var transmisionParameter = transmision != null ?
                new ObjectParameter("transmision", transmision) :
                new ObjectParameter("transmision", typeof(string));
    
            var radioParameter = radio != null ?
                new ObjectParameter("radio", radio) :
                new ObjectParameter("radio", typeof(string));
    
            var espejosParameter = espejos != null ?
                new ObjectParameter("espejos", espejos) :
                new ObjectParameter("espejos", typeof(string));
    
            var frenosAbsParameter = frenosAbs != null ?
                new ObjectParameter("frenosAbs", frenosAbs) :
                new ObjectParameter("frenosAbs", typeof(string));
    
            var unicoDuenoParameter = unicoDueno != null ?
                new ObjectParameter("unicoDueno", unicoDueno) :
                new ObjectParameter("unicoDueno", typeof(string));
    
            var cierreCentralParameter = cierreCentral != null ?
                new ObjectParameter("cierreCentral", cierreCentral) :
                new ObjectParameter("cierreCentral", typeof(string));
    
            var cataliticoParameter = catalitico != null ?
                new ObjectParameter("catalitico", catalitico) :
                new ObjectParameter("catalitico", typeof(string));
    
            var fwdParameter = fwd != null ?
                new ObjectParameter("fwd", fwd) :
                new ObjectParameter("fwd", typeof(string));
    
            var llantasParameter = llantas != null ?
                new ObjectParameter("llantas", llantas) :
                new ObjectParameter("llantas", typeof(string));
    
            var listaFotosParameter = listaFotos != null ?
                new ObjectParameter("listaFotos", listaFotos) :
                new ObjectParameter("listaFotos", typeof(string));
    
            var plataformaParameter = plataforma != null ?
                new ObjectParameter("plataforma", plataforma) :
                new ObjectParameter("plataforma", typeof(string));
    
            var consignacionParameter = consignacion != null ?
                new ObjectParameter("consignacion", consignacion) :
                new ObjectParameter("consignacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PublicarAviso_Automotoras_Result>("SP_PublicarAviso_Automotoras", codClienteParameter, ipParameter, patenteParameter, tipoParameter, marcaParameter, modeloParameter, anoParameter, versionParameter, carroceriaParameter, puertasParameter, tipoDireccionParameter, precioParameter, cilindradaParameter, potenciaParameter, colorParameter, kilomParameter, motorParameter, techoParameter, combustibleParameter, comentarioParameter, uidJatoParameter, airbagParameter, aireAconParameter, alarmaParameter, alzaVidriosParameter, nuevoParameter, transmisionParameter, radioParameter, espejosParameter, frenosAbsParameter, unicoDuenoParameter, cierreCentralParameter, cataliticoParameter, fwdParameter, llantasParameter, listaFotosParameter, plataformaParameter, consignacionParameter);
        }
    
        public virtual ObjectResult<SPR_Obtiene_dato_vehiculo_Automotora_publicar_en_CA_Result> SPR_Obtiene_dato_vehiculo_Automotora_publicar_en_CA(Nullable<int> idPublicAutom, ObjectParameter respuesta)
        {
            var idPublicAutomParameter = idPublicAutom.HasValue ?
                new ObjectParameter("idPublicAutom", idPublicAutom) :
                new ObjectParameter("idPublicAutom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPR_Obtiene_dato_vehiculo_Automotora_publicar_en_CA_Result>("SPR_Obtiene_dato_vehiculo_Automotora_publicar_en_CA", idPublicAutomParameter, respuesta);
        }
    
        public virtual int SPR_Inserta_CodAutoCA_de_CA_en_Automotora(Nullable<int> idPublicAutom, Nullable<int> codauto, ObjectParameter respuesta)
        {
            var idPublicAutomParameter = idPublicAutom.HasValue ?
                new ObjectParameter("idPublicAutom", idPublicAutom) :
                new ObjectParameter("idPublicAutom", typeof(int));
    
            var codautoParameter = codauto.HasValue ?
                new ObjectParameter("Codauto", codauto) :
                new ObjectParameter("Codauto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPR_Inserta_CodAutoCA_de_CA_en_Automotora", idPublicAutomParameter, codautoParameter, respuesta);
        }
    
        public virtual ObjectResult<SP_ActualizarAviso_Automotoras_Result> SP_ActualizarAviso_Automotoras(Nullable<int> codigoauto, Nullable<int> codCliente, string ip, string patente, string tipo, Nullable<int> marca, string modelo, Nullable<int> ano, string version, string carroceria, Nullable<int> puertas, string tipoDireccion, Nullable<int> precio, Nullable<int> cilindrada, string potencia, string color, Nullable<int> kilom, string motor, string techo, Nullable<int> combustible, string comentario, Nullable<long> uidJato, string airbag, string aireAcon, string alarma, string alzaVidrios, string nuevo, string transmision, string radio, string espejos, string frenosAbs, string unicoDueno, string cierreCentral, string catalitico, string fwd, string llantas, string listaFotos, string plataforma, string consignacion)
        {
            var codigoautoParameter = codigoauto.HasValue ?
                new ObjectParameter("codigoauto", codigoauto) :
                new ObjectParameter("codigoauto", typeof(int));
    
            var codClienteParameter = codCliente.HasValue ?
                new ObjectParameter("codCliente", codCliente) :
                new ObjectParameter("codCliente", typeof(int));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            var patenteParameter = patente != null ?
                new ObjectParameter("patente", patente) :
                new ObjectParameter("patente", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var marcaParameter = marca.HasValue ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(int));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("modelo", modelo) :
                new ObjectParameter("modelo", typeof(string));
    
            var anoParameter = ano.HasValue ?
                new ObjectParameter("ano", ano) :
                new ObjectParameter("ano", typeof(int));
    
            var versionParameter = version != null ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(string));
    
            var carroceriaParameter = carroceria != null ?
                new ObjectParameter("carroceria", carroceria) :
                new ObjectParameter("carroceria", typeof(string));
    
            var puertasParameter = puertas.HasValue ?
                new ObjectParameter("puertas", puertas) :
                new ObjectParameter("puertas", typeof(int));
    
            var tipoDireccionParameter = tipoDireccion != null ?
                new ObjectParameter("tipoDireccion", tipoDireccion) :
                new ObjectParameter("tipoDireccion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(int));
    
            var cilindradaParameter = cilindrada.HasValue ?
                new ObjectParameter("cilindrada", cilindrada) :
                new ObjectParameter("cilindrada", typeof(int));
    
            var potenciaParameter = potencia != null ?
                new ObjectParameter("potencia", potencia) :
                new ObjectParameter("potencia", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var kilomParameter = kilom.HasValue ?
                new ObjectParameter("kilom", kilom) :
                new ObjectParameter("kilom", typeof(int));
    
            var motorParameter = motor != null ?
                new ObjectParameter("motor", motor) :
                new ObjectParameter("motor", typeof(string));
    
            var techoParameter = techo != null ?
                new ObjectParameter("techo", techo) :
                new ObjectParameter("techo", typeof(string));
    
            var combustibleParameter = combustible.HasValue ?
                new ObjectParameter("combustible", combustible) :
                new ObjectParameter("combustible", typeof(int));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var uidJatoParameter = uidJato.HasValue ?
                new ObjectParameter("uidJato", uidJato) :
                new ObjectParameter("uidJato", typeof(long));
    
            var airbagParameter = airbag != null ?
                new ObjectParameter("airbag", airbag) :
                new ObjectParameter("airbag", typeof(string));
    
            var aireAconParameter = aireAcon != null ?
                new ObjectParameter("aireAcon", aireAcon) :
                new ObjectParameter("aireAcon", typeof(string));
    
            var alarmaParameter = alarma != null ?
                new ObjectParameter("alarma", alarma) :
                new ObjectParameter("alarma", typeof(string));
    
            var alzaVidriosParameter = alzaVidrios != null ?
                new ObjectParameter("alzaVidrios", alzaVidrios) :
                new ObjectParameter("alzaVidrios", typeof(string));
    
            var nuevoParameter = nuevo != null ?
                new ObjectParameter("nuevo", nuevo) :
                new ObjectParameter("nuevo", typeof(string));
    
            var transmisionParameter = transmision != null ?
                new ObjectParameter("transmision", transmision) :
                new ObjectParameter("transmision", typeof(string));
    
            var radioParameter = radio != null ?
                new ObjectParameter("radio", radio) :
                new ObjectParameter("radio", typeof(string));
    
            var espejosParameter = espejos != null ?
                new ObjectParameter("espejos", espejos) :
                new ObjectParameter("espejos", typeof(string));
    
            var frenosAbsParameter = frenosAbs != null ?
                new ObjectParameter("frenosAbs", frenosAbs) :
                new ObjectParameter("frenosAbs", typeof(string));
    
            var unicoDuenoParameter = unicoDueno != null ?
                new ObjectParameter("unicoDueno", unicoDueno) :
                new ObjectParameter("unicoDueno", typeof(string));
    
            var cierreCentralParameter = cierreCentral != null ?
                new ObjectParameter("cierreCentral", cierreCentral) :
                new ObjectParameter("cierreCentral", typeof(string));
    
            var cataliticoParameter = catalitico != null ?
                new ObjectParameter("catalitico", catalitico) :
                new ObjectParameter("catalitico", typeof(string));
    
            var fwdParameter = fwd != null ?
                new ObjectParameter("fwd", fwd) :
                new ObjectParameter("fwd", typeof(string));
    
            var llantasParameter = llantas != null ?
                new ObjectParameter("llantas", llantas) :
                new ObjectParameter("llantas", typeof(string));
    
            var listaFotosParameter = listaFotos != null ?
                new ObjectParameter("listaFotos", listaFotos) :
                new ObjectParameter("listaFotos", typeof(string));
    
            var plataformaParameter = plataforma != null ?
                new ObjectParameter("plataforma", plataforma) :
                new ObjectParameter("plataforma", typeof(string));
    
            var consignacionParameter = consignacion != null ?
                new ObjectParameter("consignacion", consignacion) :
                new ObjectParameter("consignacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ActualizarAviso_Automotoras_Result>("SP_ActualizarAviso_Automotoras", codigoautoParameter, codClienteParameter, ipParameter, patenteParameter, tipoParameter, marcaParameter, modeloParameter, anoParameter, versionParameter, carroceriaParameter, puertasParameter, tipoDireccionParameter, precioParameter, cilindradaParameter, potenciaParameter, colorParameter, kilomParameter, motorParameter, techoParameter, combustibleParameter, comentarioParameter, uidJatoParameter, airbagParameter, aireAconParameter, alarmaParameter, alzaVidriosParameter, nuevoParameter, transmisionParameter, radioParameter, espejosParameter, frenosAbsParameter, unicoDuenoParameter, cierreCentralParameter, cataliticoParameter, fwdParameter, llantasParameter, listaFotosParameter, plataformaParameter, consignacionParameter);
        }
    
        public virtual int SPR_CompruebaLogin_Automotora(string key, ObjectParameter esValido)
        {
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPR_CompruebaLogin_Automotora", keyParameter, esValido);
        }
    
        public virtual int SPR_LoginModificacion_Automotora(string nombre, string clave, ObjectParameter key)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPR_LoginModificacion_Automotora", nombreParameter, claveParameter, key);
        }
    }
}
