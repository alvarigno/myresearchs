//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PublicarDITEC.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class patentesEntities : DbContext
    {
        public patentesEntities()
            : base("name=patentesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<SP_GetAgnosXMarcaModelo_Result> SP_GetAgnosXMarcaModelo(Nullable<int> codMarca, Nullable<int> codModelo)
        {
            var codMarcaParameter = codMarca.HasValue ?
                new ObjectParameter("codMarca", codMarca) :
                new ObjectParameter("codMarca", typeof(int));
    
            var codModeloParameter = codModelo.HasValue ?
                new ObjectParameter("codModelo", codModelo) :
                new ObjectParameter("codModelo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAgnosXMarcaModelo_Result>("SP_GetAgnosXMarcaModelo", codMarcaParameter, codModeloParameter);
        }
    
        public virtual ObjectResult<SP_GetDatosXPatente_Result> SP_GetDatosXPatente(string ppu)
        {
            var ppuParameter = ppu != null ?
                new ObjectParameter("ppu", ppu) :
                new ObjectParameter("ppu", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDatosXPatente_Result>("SP_GetDatosXPatente", ppuParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GetIdmarca(string marca)
        {
            var marcaParameter = marca != null ?
                new ObjectParameter("marca", marca) :
                new ObjectParameter("marca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetIdmarca", marcaParameter);
        }
    
        public virtual ObjectResult<SP_GetMarcas_Result> SP_GetMarcas(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetMarcas_Result>("SP_GetMarcas", topParameter);
        }
    
        public virtual ObjectResult<SP_GetModelosXMarca_Result> SP_GetModelosXMarca(Nullable<int> codMarca)
        {
            var codMarcaParameter = codMarca.HasValue ?
                new ObjectParameter("codMarca", codMarca) :
                new ObjectParameter("codMarca", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetModelosXMarca_Result>("SP_GetModelosXMarca", codMarcaParameter);
        }
    
        public virtual ObjectResult<SP_GetPreciosPromedio_Result> SP_GetPreciosPromedio(Nullable<int> codMarca, Nullable<int> codModelo, string modelo, Nullable<int> agno)
        {
            var codMarcaParameter = codMarca.HasValue ?
                new ObjectParameter("codMarca", codMarca) :
                new ObjectParameter("codMarca", typeof(int));
    
            var codModeloParameter = codModelo.HasValue ?
                new ObjectParameter("codModelo", codModelo) :
                new ObjectParameter("codModelo", typeof(int));
    
            var modeloParameter = modelo != null ?
                new ObjectParameter("modelo", modelo) :
                new ObjectParameter("modelo", typeof(string));
    
            var agnoParameter = agno.HasValue ?
                new ObjectParameter("agno", agno) :
                new ObjectParameter("agno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPreciosPromedio_Result>("SP_GetPreciosPromedio", codMarcaParameter, codModeloParameter, modeloParameter, agnoParameter);
        }
    
        public virtual ObjectResult<SP_GetVehxMMA_Result> SP_GetVehxMMA(Nullable<int> codMarca, Nullable<int> codModelo, Nullable<int> agno)
        {
            var codMarcaParameter = codMarca.HasValue ?
                new ObjectParameter("codMarca", codMarca) :
                new ObjectParameter("codMarca", typeof(int));
    
            var codModeloParameter = codModelo.HasValue ?
                new ObjectParameter("codModelo", codModelo) :
                new ObjectParameter("codModelo", typeof(int));
    
            var agnoParameter = agno.HasValue ?
                new ObjectParameter("agno", agno) :
                new ObjectParameter("agno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetVehxMMA_Result>("SP_GetVehxMMA", codMarcaParameter, codModeloParameter, agnoParameter);
        }
    }
}
